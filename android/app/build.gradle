def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.foresight.gsec"
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.foresight.gsec"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        
        // Production-ready configurations
        resConfigs "en", "es", "fr", "de"  // Supported languages
        
        // Build configuration fields
        buildConfigField "String", "APP_NAME", '"Gadget Security"'
        buildConfigField "String", "VERSION_NAME", "\"${flutterVersionName}\""
        buildConfigField "int", "VERSION_CODE", "${flutterVersionCode}"
    }

    signingConfigs {
        debug {
            // Debug signing configuration
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Production signing configuration - replace with your actual keystore
            // storeFile file('keystore/release.keystore')
            // storePassword System.getenv("KEYSTORE_PASSWORD")
            // keyAlias System.getenv("KEY_ALIAS")
            // keyPassword System.getenv("KEY_PASSWORD")
            
            // For now, using debug keys - CHANGE FOR PRODUCTION
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            signingConfig signingConfigs.debug
            buildConfigField "String", "ENVIRONMENT", '"development"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            resValue "string", "app_name", "Gadget Security Debug"
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField "boolean", "ENABLE_LOGGING", "false"
            resValue "string", "app_name", "Gadget Security"
            
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        
        staging {
            applicationIdSuffix ".staging"
            debuggable true
            signingConfig signingConfigs.debug
            buildConfigField "String", "ENVIRONMENT", '"staging"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            resValue "string", "app_name", "Gadget Security Staging"
            
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.firebase:firebase-analytics:21.5.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.firebase:firebase-auth:22.3.1'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.google.firebase:firebase-ads:22.6.0'
}

apply plugin: 'com.google.gms.google-services'