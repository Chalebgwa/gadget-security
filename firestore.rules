rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.email in [
               'admin@gadgetsecurity.app',
               'support@gadgetsecurity.app'
             ];
    }
    
    function isValidTimestamp(field) {
      return field is timestamp;
    }
    
    function hasValidFields(required, optional) {
      let allFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required.toSet()) &&
             request.resource.data.keys().hasOnly(allFields.toSet());
    }
    
    // User documents
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && 
                       hasValidFields(
                         ['name', 'surname', 'email', 'phone', 'governmentId', 'id'],
                         ['createdAt', 'updatedAt', 'imageUrl', 'city', 'country', 'middlename']
                       ) &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.id == userId;
      allow update: if isOwner(userId) && 
                       (!('id' in request.resource.data.diff(resource.data).affectedKeys())) &&
                       (!('email' in request.resource.data.diff(resource.data).affectedKeys()) || 
                        request.resource.data.email == request.auth.token.email);
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Device documents
    match /devices/{deviceId} {
      allow read: if isAuthenticated();
      allow create: if isValidUser() && 
                       hasValidFields(
                         ['identifier', 'ownerId', 'type', 'brand', 'model'],
                         ['createdAt', 'updatedAt', 'imageUrl', 'documentUrl', 'description', 'serialNumber', 'purchaseDate', 'purchasePrice', 'isStolen', 'isForSale']
                       ) &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.identifier.size() > 0 &&
                       request.resource.data.type.size() > 0;
      allow update: if isOwner(resource.data.ownerId) && 
                       (!('ownerId' in request.resource.data.diff(resource.data).affectedKeys()) ||
                        request.resource.data.ownerId == request.auth.uid) &&
                       (!('identifier' in request.resource.data.diff(resource.data).affectedKeys()));
      allow delete: if isOwner(resource.data.ownerId) || isAdmin();
    }
    
    // Security info (sensitive data)
    match /security_info/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isOwner(userId) && 
                       hasValidFields(
                         ['safe', 'alert'],
                         ['createdAt', 'updatedAt']
                       );
    }
    
    // Primary identification mapping
    match /primary/{identityId} {
      allow read: if isAuthenticated();
      allow write: if isValidUser() && 
                      hasValidFields(['uid'], ['createdAt', 'updatedAt']) &&
                      request.resource.data.uid == request.auth.uid;
    }
    
    // Chat conversations
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                            request.auth.uid in resource.data.participants;
      allow create: if isValidUser() && 
                       hasValidFields(
                         ['participants', 'createdAt'],
                         ['lastMessage', 'lastMessageTime', 'updatedAt']
                       ) &&
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.participants.size() == 2;
    }
    
    // Chat messages
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow create: if isValidUser() && 
                       hasValidFields(
                         ['senderId', 'text', 'timestamp'],
                         ['type', 'attachmentUrl']
                       ) &&
                       request.resource.data.senderId == request.auth.uid &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // Trading/Transaction documents
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.buyerId || 
                      request.auth.uid == resource.data.sellerId);
      allow create: if isValidUser() && 
                       hasValidFields(
                         ['deviceId', 'buyerId', 'sellerId', 'price', 'status', 'createdAt'],
                         ['updatedAt', 'completedAt', 'cancelledAt', 'escrowId']
                       ) &&
                       (request.auth.uid == request.resource.data.buyerId || 
                        request.auth.uid == request.resource.data.sellerId);
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.buyerId || 
                        request.auth.uid == resource.data.sellerId) &&
                       (!('deviceId' in request.resource.data.diff(resource.data).affectedKeys())) &&
                       (!('buyerId' in request.resource.data.diff(resource.data).affectedKeys())) &&
                       (!('sellerId' in request.resource.data.diff(resource.data).affectedKeys()));
    }
    
    // Emergency alerts (high security)
    match /emergency_alerts/{alertId} {
      allow read: if isAdmin();
      allow create: if isValidUser() && 
                       hasValidFields(
                         ['userId', 'deviceId', 'timestamp', 'location'],
                         ['message', 'resolved', 'responderId']
                       ) &&
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || 
                       (isOwner(resource.data.userId) && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['resolved'.toSet()]));
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics (write-only for users, read for admins)
    match /analytics/{document=**} {
      allow create: if isAuthenticated();
      allow read: if isAdmin();
    }
    
    // App configuration (read-only for users)
    match /app_config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}